generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URI")
}

model users {
  id          String        @id @unique
  userid      String?       @unique
  avatar      String?
  banner      String?
  username    String?
  globalName  String?
  apikey      secrets?      @relation
  secret      String?       @unique @db.VarChar(128)
  folder      String?       @db.Text
  webhook     String?       @db.Text
  cookie      String?       @db.Text
  beta        Boolean?      @default(false)
  banned      Boolean?      @default(false)
  verified    Boolean?      @default(false)
  domain      String?       @db.Text
  domains     domains[]
  uploads     uploads[]
  key         String?       @unique
  signature   signatures?   @relation(fields: [key], references: [key])
  org_members org_member[]
  permissions permissions[]
  orgs        orgs[]
}

model secrets {
  id        String         @id @default(uuid())
  key       String         @unique @db.VarChar(128)
  uses      Int            @default(0)
  maxUses   Int            @default(500)
  limited   Boolean        @default(false)
  entity    SecretEntities
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  orgId     String?        @unique
  org       orgs?          @relation(fields: [orgId], references: [id])
  user      users?         @relation(fields: [userId], references: [id])
  userId    String?        @unique
}

model permissions {
  id    String          @id @default(uuid())
  name  UserPermissions
  users users[]
}

model uploads {
  id        String     @id @default(uuid())
  key       String
  name      String
  flag      UploadFlag
  userid    String?
  org       String?
  mime      String
  size      Int?
  createdAt DateTime?  @db.Date
  updatedAt DateTime?  @updatedAt
  users     users?     @relation(fields: [userid], references: [userid])
  orgs      orgs?      @relation(fields: [org], references: [id])
}

model domains {
  id        String   @id @default(uuid())
  name      String   @unique @db.VarChar(255)
  content   String   @db.LongText
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  users     users?   @relation(fields: [user], references: [id])
  user      String?
}

model signatures {
  id        Int      @id @default(autoincrement())
  key       String   @unique @default(uuid())
  user      users?
  uses      Int?     @default(0)
  maxUses   Int?     @default(100)
  expired   Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model webhooks {
  id        String   @id
  token     String   @db.LongText
  name      String   @db.Text
  enabled   Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model errors {
  id        String    @id @default(uuid())
  state     ErrStates @default(OPEN)
  type      ErrTypes  @default(UNKNOWN_ERR)
  status    String
  message   String    @db.LongText
  reporter  String
  error_obj Json
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model partners {
  id      String  @id @unique
  name    String  @db.Text
  logo    String  @db.Text
  banner  String  @db.Text
  owner   String  @db.Text
  about   String  @db.Text
  discord String  @db.Text
  website String  @db.Text
  twitter String? @db.Text
}

model reports {
  id        String       @id
  type      ReportTypes  @default(BUG_REPORT)
  author    String       @db.Text
  reason    String       @db.LongText
  status    ReportStatus @default(OPEN)
  notes     notes[]
  mod       String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model notes {
  id        String   @id
  author    String   @db.Text
  content   String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  report    reports  @relation(fields: [id], references: [id])
}

model orgs {
  id          String       @id @unique
  name        String       @db.VarChar(255)
  logo        String       @db.VarChar(255)
  banner      String       @db.LongText
  email       String?      @db.LongText
  password    String?      @db.LongText
  links       org_links?
  description String       @db.LongText
  members     org_member[]
  creator     users        @relation(fields: [owner], references: [userid])
  owner       String       @db.VarChar(255)
  apikey      secrets?     @relation
  secret      String?      @unique @db.VarChar(128)
  webhook     String?
  verified    Boolean?     @default(false)
  banned      Boolean?     @default(false)
  partner     Boolean?     @default(false)
  domain      String?
  domains     org_domain[]
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime?    @updatedAt
  uploads     uploads[]
}

model org_member {
  id     String @id @unique
  org    orgs   @relation(fields: [id], references: [id])
  userid String @unique
  user   users  @relation(fields: [userid], references: [id])
  perms  Json?
}

model org_links {
  id        String @id @unique
  discord   String @db.Text
  twitter   String @db.Text
  github    String @db.Text
  instagram String @db.Text
  youtube   String @db.Text
  website   String @db.Text
  org       orgs   @relation(fields: [id], references: [id])
}

model org_domain {
  id        String   @id
  name      String   @db.Text
  content   String   @db.LongText
  verified  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  org       orgs     @relation(fields: [id], references: [id])
}

enum UploadFlag {
  PUBLIC
  PRIVATE
  UNLISTED
}

enum SecretEntities {
  Admin
  User
  Organization
}

enum RoleNamespace {
  org
  org_member
  org_links
  org_domain
}

enum RolePermissions {
  admin
  create
  update
  delete
}

enum UserPermissions {
  OWNER
  ADMIN
  STAFF
  SUPPORT
  DEVELOPER
  MEMBER
}

enum ReportTypes {
  BUG_REPORT
  FEATURE_REQUEST
  PARTNER_REQUEST
  PARTNER_REPORT
  USER_REPORT
  IMAGE_REPORT
  DOMAIN_REPORT
  WEBHOOK_REPORT
}

enum ReportStatus {
  OPEN
  INVESTIGATING
  INFO_NEEDED
  CLOSED
}

enum ErrTypes {
  API_ERR
  AUTH_ERR
  BUCKET_ERR
  CACHE_ERR
  CLIENT_ERR
  DB_ERR
  EXTERNAL_ERR
  INTERNAL_ERR
  UPLOADS_ERR
  USER_ERR
  WEBHOOK_ERR
  UNKNOWN_ERR
}

enum ErrStates {
  OPEN
  INVESTIGATING
  RESOLVED
  IGNORED
}
